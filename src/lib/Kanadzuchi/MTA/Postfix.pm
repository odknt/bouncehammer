# $Id: Postfix.pm,v 1.6.2.3 2011/08/23 21:28:27 ak Exp $
# Kanadzuchi::MTA::
                                               
 #####                  ##    ###  ##          
 ##  ##  ####   ##### ###### ##        ##  ##  
 ##  ## ##  ## ##       ##  ##### ###   ####   
 #####  ##  ##  ####    ##   ##    ##    ##    
 ##     ##  ##     ##   ##   ##    ##   ####   
 ##      ####  #####     ### ##   #### ##  ##  
package Kanadzuchi::MTA::Postfix;
use base 'Kanadzuchi::MTA';
use strict;
use warnings;

#  ____ ____ ____ ____ ____ ____ _________ ____ ____ ____ ____ 
# ||G |||l |||o |||b |||a |||l |||       |||v |||a |||r |||s ||
# ||__|||__|||__|||__|||__|||__|||_______|||__|||__|||__|||__||
# |/__\|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|/__\|/__\|/__\|
#
# Postfix manual - bounce(5) - http://www.postfix.org/bounce.5.html
my $RxPostfix = {
	'from' => qr{ [(]Mail Delivery System[)]\z},
	'begin' => [
		qr{\A\s+The Postfix program\z},
		qr{\A\s+The Postfix on .+ program\z},	# The Postfix on <os name> program
		qr{\A\s+The \w+ Postfix program\z},	# The <name> Postfix program
		qr{\A\s+The mail system\z},
		qr{\AThe \w+ program\z},		# The <custmized-name> program
		qr{\AThis is the Postfix program},
		qr{\AThis is the \w+ Postfix program},	# This is the <name> Postfix program
		qr{\AThis is the \w+ program},		# This is the <customized-name> Postfix program
	],
	'endof' => qr{\AReporting-MTA: },
	'subject' => qr{\AUndelivered Mail Returned to Sender\z},
};

my $RxErrors = {
	'mailboxfull' => [
		# postfix/src/{local,virtula}/maildir.c:
		#  vstring_sprintf_prepend(why->reason, "maildir delivery failed: ");
		qr{maildir delivery failed: User disk quota ?.* exceeded},
		qr{maildir delivery failed: Domain disk quota ?.* exceeded},
		qr{mailbox exceeded the local limit},
	],
	'exceedlimit' => [
		qr{message too large},
	],
	'systemerror' => [
		qr{can[']t create user output file},
		qr{mail forwarding loop for },
		qr{mail for .+ loops back to myself},
		qr{mail system configuration error},
		qr{Server configuration error},
	],
	'mailererror' => [
		# postfix/src/global/pipe_command.c:
		#  vstring_prepend(why->reason, "Command failed: ", 
		qr{Command failed: },
	],
	'securityerr' => [
		qr{authentication failed; server .+ said:},
	],
};

#  ____ ____ ____ ____ ____ _________ ____ ____ ____ ____ ____ ____ ____ 
# ||C |||l |||a |||s |||s |||       |||M |||e |||t |||h |||o |||d |||s ||
# ||__|||__|||__|||__|||__|||_______|||__|||__|||__|||__|||__|||__|||__||
# |/__\|/__\|/__\|/__\|/__\|/_______\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|
#
sub version { '2.1.3' };
sub description { 'Postfix' };
sub xsmtpagent { 'X-SMTP-Agent: Postfix'.qq(\n); }
sub reperit
{
	# +-+-+-+-+-+-+-+
	# |r|e|p|e|r|i|t|
	# +-+-+-+-+-+-+-+
	#
	# @Description	Detect an error from Postfix
	# @Param <ref>	(Ref->Hash) Message header
	# @Param <ref>	(Ref->String) Message body
	# @Return	(String) Pseudo header content
	my $class = shift();
	my $mhead = shift() || return q();
	my $mbody = shift() || return q();

	#  ____           _    __ _      
	# |  _ \ ___  ___| |_ / _(_)_  __
	# | |_) / _ \/ __| __| |_| \ \/ /
	# |  __/ (_) \__ \ |_|  _| |>  < 
	# |_|   \___/|___/\__|_| |_/_/\_\
	#                                
	# Pre-Process eMail headers and body part of message which generated by Postfix
	#   e.g.) From: MAILER-DAEMON (Mail Delivery System)
	#         Subject: Undelivered Mail Returned to Sender
	return q() unless( $mhead->{'subject'} =~ $RxPostfix->{'subject'} );
	return q() unless( $mhead->{'from'} =~ $RxPostfix->{'from'} );

	my $phead = q();	# (String) Pseudo email header
	my $pbody = q();	# (String) Pseudo body part
	my $pstat = q();	# (String) #n.n.n Status code in message body
	my $xsmtp = q();	# (String) SMTP Command in transcript of session
	my $rhostsaid = q();	# (String) Remote host said: ...
	my $esmtpcomm = {};	# (Ref->Hash) SMTP Command names
	my $endof = 0;		# (Integer) The line matched 'endof' regexp.

	EACH_LINE: foreach my $el ( split( qq{\n}, $$mbody ) )
	{
		$endof = 1 if( $endof == 0 && $el =~ $RxPostfix->{'endof'} );
		next() if( $endof || $el =~ m{\A--} || $el =~ m{\A\z} );

		if( ( grep { $el =~ $_ } @{ $RxPostfix->{'begin'} }) .. ($el =~ $RxPostfix->{'endof'}) )
		{
			# The mail system, The Postfix program, This is the Postfix program
			if( $el =~ m{\A[<].+[@].+[>][:]?} )
			{
				# <recipient@example.com>: host mx.example.com [102.0.2.3] said:
				# <recipient@example.net> (expanded from <user@example.net>): host ...
				$rhostsaid = $el;
				next();
			}

			if( length $rhostsaid )
			{
				# <user@example.jp>: host mta.example.jp[192.0.2.44]
				#    said: 550 Unknown user user@example.jp (in reply to RCPT TO command)
				# last() if( $el =~ m{\A\z} || $el =~ m{\A--} );
				$rhostsaid .= q{ }.$el;
				next();
			}
		}

	} # End of foreach(EACH_LINE)

	return q() unless length $rhostsaid;

	#                   The mail system
	#
	# <recipient@example.com>: host mx.example.com [192.0.2.3] said:
	#    550 Unknown user recipient@example.com (in reply to end of DATA command)
	#
	$rhostsaid =~ y{ }{ }s;
	$rhostsaid =~ s{--\d+[.]\d+/\w.+\z}{};

	if( $rhostsaid =~ m{[(][#]([45][.][0-7][.]\d+)[)]} || $rhostsaid =~ m{\b([45][.]\d+[.]\d+)\b} )
	{
		# D.S.N. in the error message
		# (#5.7.1) (in reply to RCPT TO command) 
		# 5.1.0 - Unknown address error ...
		$pstat = $1;
	}
	else
	{
		foreach my $_er ( keys %$RxErrors )
		{
			if( grep { $rhostsaid =~ $_ } @{ $RxErrors->{$_er} } )
			{
				$pstat = Kanadzuchi::RFC3463->status($_er,'p','i');
				last();
			}
		}
	}

	if( $rhostsaid =~ m{[(]in reply to .*([A-Z]{4}).*command[)]} )
	{
		# src/smtp/smtp_proto.c: "host %s said: %s (in reply to %s)",
		$xsmtp = $1;
	}

	if( ! $xsmtp || $xsmtp eq 'CONN' )
	{
		$esmtpcomm = __PACKAGE__->SMTPCOMMAND();
		foreach my $cmd ( keys %$esmtpcomm )
		{
			if( $rhostsaid =~ $esmtpcomm->{ $cmd } )
			{
				$xsmtp = uc $cmd;
				last();
			}
		}
	}

	$pstat ||= Kanadzuchi::RFC3463->status('undefined','p','i');
	$phead  .= __PACKAGE__->xsmtpstatus($pstat);
	$phead  .= __PACKAGE__->xsmtpdiagnosis($rhostsaid);
	$phead  .= __PACKAGE__->xsmtpcommand($xsmtp);
	$phead  .= __PACKAGE__->xsmtpagent();

	return $phead;
}

1;
__END__
